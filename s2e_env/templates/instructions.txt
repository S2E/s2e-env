Here are some hints to get started with your project:

{#############################################################################}
{% if dll_exports is defined %}

The processed binary is a Windows DLL. The DLL will be loaded with the default
entry point set to DllEntryPoint.

To change the default entry point please specify DLL_ENTRY_POINT in the
bootstrap.sh

The list of the detected exported functions is provided below. If name of the
function is not avaiable its ordinal is printed:
{{ dll_exports | join(', ') }}
-------
{% endif %}

{#############################################################################}
{% if dynamically_linked and image.group_name == 'linux' %}

s2e.so
======

{{ target_path }} is dynamically linked - you can use s2e.so to
generate symbolic command line arguments.

{% endif %}

{#############################################################################}
{% if dynamically_linked and modelled_funcs %}

Function Models
===============

{{ target_path }} is dynamically linked and imports the following
functions:

{{ modelled_funcs }}

The FunctionModels plugin provides models for these functions.
You can enable it in s2e-config.lua.

{% endif %}

{#############################################################################}
{% if use_seeds %}
Seed Files
==========

You have enabled seed file support. Seed files will be used to drive
symbolic execution. Seeds can be based on real files, generated by a fuzzer,
or randomly.

Please place seeds in {{ seeds_dir }}.
Seed files must be named using the following format:

{% if project_type == 'cgc' %}
    <index>-<priority>.pov

* <index> is a unique integer identifier starting from 0
* <priority> is an integer priority, where 0 is the highest priority

Examples: 0-1.pov, 1-1.pov, 2-0.pov, etc.
{% else %}

    <index>-<priority>.<extension>

* <index> is a unique integer identifier starting from 0
* <priority> is an integer priority, where 0 is the highest priority
* <extension> an optional file extension

Examples: t0-1.png, 1-1.jpg, 2-0.elf, etc.
{% endif %}
{% endif %}


{#############################################################################}
Running S2E
===========

The S2E project is now ready to run. You have two ways to start the analysis:

    * Use the "s2e run" command
    * cd {{ project_dir }} && ./launch-s2e.sh

The results of the analysis can be found in the s2e-last directory.
You may customize s2e-config.lua, bootstrap.sh, launch-s2e.sh, and others
as needed.

If something does not run as expected, you can troubleshoot like this:

    * Enable graphics output by deleting the -nographic flag from launch-s2e.sh
    * Look at the logs in serial.txt, log.txt, and s2e-last/debug.txt
    * Run S2E in GDB using ./launch-s2e.sh debug

-------
Project {{ project_name }} created.
