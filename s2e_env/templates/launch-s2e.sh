#!/bin/bash
#
# This file was automatically generated by s2e-env at {{ creation_time }}
#
# This script is used to run the S2E analysis. Additional QEMU command line
# arguments can be passed to this script at run time.
#

ENV_DIR="{{ env_dir }}"
INSTALL_DIR="$ENV_DIR/install"
BUILD_DIR="$ENV_DIR/build"
BUILD=debug

# Either s2e for symbolic execution support or s2e_sp for single-path mode
S2E_MODE={% if single_path %}s2e_sp{% else %}s2e{% endif %}

if [ "x$GUI" != "x1" ]; then
  GRAPHICS=-nographic
fi

if [ "x$1" = "xdebug" ]; then
  DEBUG=1
  shift
fi

{% if rel_image_path %}

IMAGE_PATH="$ENV_DIR/{{ rel_image_path }}"
IMAGE_JSON="$(dirname $IMAGE_PATH)/image.json"

if [ ! -f "$IMAGE_PATH" -o ! -f "$IMAGE_JSON" ]; then
    echo "$IMAGE_PATH and/or $IMAGE_JSON do not exist. Please check that your images are built properly."
    exit 1
fi

QEMU_DRIVE="-drive file=$IMAGE_PATH,format=s2e,cache=writeback"
QEMU_EXTRA_FLAGS=$(jq -r '.qemu_extra_flags' "$IMAGE_JSON")
QEMU_MEMORY=$(jq -r '.memory' "$IMAGE_JSON")
QEMU_SNAPSHOT=$(jq -r '.snapshot' "$IMAGE_JSON")

{% else %}

QEMU_EXTRA_FLAGS="{{qemu_extra_flags}}"
QEMU_MEMORY="{{qemu_memory}}"
{% if qemu_snapshot %}
QEMU_SNAPSHOT="{{qemu_snapshot}}"
{% endif %}
{% if qemu_bios %}
QEMU_BIOS="-bios \"{{qemu_bios}}\""
{% endif %}

{% endif %}


export S2E_CONFIG=s2e-config.lua
export S2E_SHARED_DIR=$INSTALL_DIR/share/libs2e
export S2E_MAX_PROCESSES=1
export S2E_UNBUFFERED_STREAM=1

if [ $S2E_MAX_PROCESSES -gt 1 ]; then
    # Multi-threaded mode does not support graphics output, so we override
    # whatever settings were there before.
    export GRAPHICS=-nographic
fi

QEMU_ARGS="-k en-us -monitor null -enable-kvm -serial file:serial.txt $GRAPHICS -m $QEMU_MEMORY $QEMU_EXTRA_FLAGS"

if [ "x$QEMU_DRIVE" != "x" ]; then
    QEMU_ARGS="$QEMU_ARGS $QEMU_DRIVE"
fi

if [ "x$QEMU_SNAPSHOT" != "x" ]; then
    QEMU_ARGS="$QEMU_ARGS -loadvm $QEMU_SNAPSHOT"
fi

if [ "x$QEMU_BIOS" != "x" ]; then
    QEMU_ARGS="$QEMU_ARGS $QEMU_BIOS"
    QEMU_ARGS="$QEMU_ARGS -chardev stdio,id=seabios -device isa-debugcon,iobase=0x402,chardev=seabios"
fi

if [ "x$DEBUG" != "x" ]; then

    if [ ! -d "$BUILD_DIR/qemu-$BUILD" ]; then
        echo "No debug build found in $BUILD_DIR/qemu-$BUILD. Please run \`\`s2e build -g\`\`"
        exit 1
    fi

    QEMU="$BUILD_DIR/qemu-$BUILD/{{ qemu_arch }}-softmmu/qemu-system-{{ qemu_arch }}"
    LIBS2E="$BUILD_DIR/libs2e-$BUILD/{{ qemu_arch }}-$S2E_MODE-softmmu/libs2e.so"

    rm -f gdb.ini

    cat <<EOF >gdb.ini
    handle SIGUSR1 noprint
    handle SIGUSR2 noprint
    set disassembly-flavor intel
    set print pretty on
    set environment S2E_CONFIG=$S2E_CONFIG
    set environment S2E_SHARED_DIR=$S2E_SHARED_DIR
    set environment LD_PRELOAD=$LIBS2E
    set environment S2E_UNBUFFERED_STREAM=1
    # set environment LIBCPU_LOG_LEVEL=in_asm,int,exec
    # set environment LIBCPU_LOG_FILE=/tmp/log.txt
    # set environment S2E_QMP_SERVER=127.0.0.1:3322
    set python print-stack full

python
import sys
sys.path.insert(0, '/usr/share/gcc/python')
from libstdcxx.v6.printers import register_libstdcxx_printers
register_libstdcxx_printers (None)
end
EOF

    GDB="gdb  --init-command=gdb.ini --args"

    # Useful options:
    # - Display debug output from the BIOS:
    #    -chardev stdio,id=seabios -device isa-debugcon,iobase=0x402,chardev=seabios

    $GDB $QEMU $QEMU_ARGS $*

else
    QEMU="$INSTALL_DIR/bin/qemu-system-{{ qemu_arch }}"
    LIBS2E="$INSTALL_DIR/share/libs2e/libs2e-{{ qemu_arch }}-$S2E_MODE.so"

    LD_PRELOAD=$LIBS2E $QEMU $QEMU_ARGS $* &

    CHILD_PID=$!
    trap "kill $CHILD_PID" SIGINT
    wait $CHILD_PID
fi
