"""
Copyright (c) 2017 Dependable Systems Laboratory, EPFL

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""


from __future__ import division

from collections import namedtuple
import json
import logging
import os
import shutil

import sh
from sh import ErrorReturnCode

from s2e_env.command import ProjectCommand, CommandError
from . import get_tb_files, parse_tb_file

try:
    from tempfile import TemporaryDirectory
except ImportError:
    from s2e_env.utils.tempdir import TemporaryDirectory


logger = logging.getLogger('basicblock')


BasicBlock = namedtuple('BasicBlock', ['start_addr', 'end_addr', 'function'])
TranslationBlock = namedtuple('TranslationBlock', ['start_addr', 'end_addr'])


def _basic_block_coverage(basic_blocks, translation_blocks):
    """
    Calculate the basic block coverage.

    This information is derived from the basic block list (generated by IDA
    Pro) and the translation block list (generated by S2E's
    ``TranslationBlockCoverage``).

    Args:
        basic_blocks: List of basic blocks.
        translation_blocks: List of executed translation blocks.

    Returns:
        A list of ``BasicBlock``s executed by S2E.
    """
    logger.info('Calculating basic block coverage')

    # Naive approach :(
    covered_bbs = set()
    for tb_start_addr, tb_end_addr in translation_blocks:
        for bb in basic_blocks:
            # Check if the translation block falls within a basic block OR
            # a basic block falls within a translation block
            if (bb.end_addr >= tb_start_addr >= bb.start_addr or
                    bb.start_addr <= tb_end_addr <= bb.end_addr):
                covered_bbs.add(bb)

    return list(covered_bbs)


class BasicBlockCoverage(ProjectCommand):
    """
    Generate a basic block coverage report.

    This subcommand requires IDA Pro.
    """

    help = 'Generate a basic block coverage report. This requires IDA Pro.'

    RESULTS = 'Basic block coverage saved to {bb_file}\n\n'             \
              'Statistics\n'                                            \
              '==========\n\n'                                          \
              'Total basic blocks: {num_bbs}\n'                         \
              'Covered basic blocks: {num_covered_bbs} ({percent:.1%})'

    def handle(self, *args, **options):
        # Determine the IDA Pro path and check that it is valid
        ida_path = self._get_ida_path()
        if not os.path.isfile(ida_path):
            raise CommandError('IDA Pro not found at %s' % ida_path)

        target_path = self._project_desc['target']

        # Get the basic block information
        bbs = self._get_basic_blocks(ida_path, target_path)

        # Get translation block coverage information
        tbs = self._get_tb_coverage(os.path.basename(target_path))
        if not tbs:
            raise CommandError('No translation block coverage information found')

        # Calculate the basic block coverage information
        bb_coverage = _basic_block_coverage(bbs, tbs)

        # Write the basic block information to a JSON file
        bb_coverage_file = self._save_basic_block_coverage(bb_coverage)

        # Calculate some statistics
        total_bbs = len(bbs)
        covered_bbs = len(bb_coverage)

        return self.RESULTS.format(bb_file=bb_coverage_file,
                                   num_bbs=total_bbs,
                                   num_covered_bbs=covered_bbs,
                                   percent=covered_bbs / total_bbs)

    def _get_ida_path(self):
        """
        Determine which version of IDA to use based on the project's
        architecture (32 or 64 bit).

        Returns the path to IDA Pro or raises an exception if it cannot be
        found.
        """
        ida_dir = self.config['ida']['dir']
        if not ida_dir:
            raise CommandError('No path to IDA has been given in s2e.yaml. '
                               'IDA is required to generate a basic block '
                               'coverage report')

        project_arch = self._project_desc['arch']
        if project_arch == 'i386':
            ida_path = os.path.join(ida_dir, 'idal')
        elif project_arch == 'x86_64':
            ida_path = os.path.join(ida_dir, 'idal64')
        else:
            raise CommandError('Invalid project architecture \'%s\' - unable '
                               'to determine the version of IDA Pro to use' %
                               project_arch)

        return ida_path

    def _get_basic_blocks(self, ida_path, target_path):
        """
        Extract basic block information from the target binary using S2E's IDA
        Pro script.

        This extraction is done within a temporary directory so that we don't
        pollute the file system with temporary idbs and other such things.

        Args:
            ida_path: Path to the IDA Pro executable.
            target_path: Path to the analysis target.

        Returns:
            A list of ``BasicBlock``s, i.e. named tuples containing:
                1. Basic block start address
                2. Basic block end address
                3. Name of function that the basic block resides in
        """
        logger.info('Generating basic block information from IDA Pro')

        try:
            with TemporaryDirectory() as temp_dir:
                # Copy the binary to the temporary directory. Because projects
                # are created with a symlink to the target program, then IDA
                # Pro will generate the idb and bblist files in the symlinked
                # target's directory. Which is not what we want
                target_name = os.path.basename(target_path)

                temp_target_path = os.path.join(temp_dir, target_name)
                shutil.copyfile(target_path, temp_target_path)

                # Run the IDA Pro extractBasicBlocks script
                env_vars = os.environ.copy()
                env_vars['TVHEADLESS'] = '1'
                # This is required if s2e-env runs inside screen
                env_vars['TERM'] = 'xterm'

                ida = sh.Command(ida_path)
                ida('-A', '-B',
                    '-S%s' % self.install_path('bin', 'extractBasicBlocks.py'),
                    temp_target_path, _out=os.devnull, _tty_out=False,
                    _cwd=temp_dir, _env=env_vars)

                # Check that the basic block list file was correctly generated
                bblist_file = os.path.join(temp_dir, '%s.bblist' % target_name)
                if not os.path.isfile(bblist_file):
                    raise CommandError('Failed to generate bblist file for '
                                       '%s' % target_name)

                # Parse the basic block list file
                #
                # to_basic_block takes a 3-tuple read from the bblist file and
                # converts it to a BasicBlock
                to_basic_block = lambda tup: BasicBlock(int(tup[0], 16),
                                                        int(tup[1], 16),
                                                        tup[2])
                with open(bblist_file, 'r') as f:
                    return [to_basic_block(l.rstrip().split(' ')) for l in f]
        except ErrorReturnCode as e:
            raise CommandError(e)

    def _get_tb_coverage(self, target_name):
        """
        Extract translation block (TB) coverage from the JSON file(s) generated
        by the ``TranslationBlockCoverage`` plugin.

        Args:
            target_name: Name of the analysis target file.

        Returns:
            A list of ``TranslationBlock``'s, i.e. named tuples containing:
                1. Translation block start address
                2. Translation block end address
        """
        logger.info('Generating translation block coverage information')

        tb_coverage_files = get_tb_files(self.project_path('s2e-last'))
        covered_tbs = set()

        for tb_coverage_file in tb_coverage_files:
            tb_coverage_data = parse_tb_file(tb_coverage_file, target_name)
            if not tb_coverage_data:
                continue

            covered_tbs.update(TranslationBlock(start_addr, end_addr) for
                               start_addr, end_addr, _ in
                               tb_coverage_data)

        return list(covered_tbs)

    def _save_basic_block_coverage(self, basic_blocks):
        """
        Write the basic block coverage information to a JSON file.

        Returns the path of the JSON file.
        """
        bb_coverage_file = self.project_path('s2e-last',
                                             'basic_block_coverage.json')

        logger.info('Saving basic block coverage to %s', bb_coverage_file)

        to_dict = lambda bb: {'start_addr': bb.start_addr,
                              'end_addr': bb.end_addr,
                              'function': bb.function}
        bbs_json = [to_dict(bb) for bb in basic_blocks]

        with open(bb_coverage_file, 'w') as f:
            json.dump(bbs_json, f)

        return bb_coverage_file
